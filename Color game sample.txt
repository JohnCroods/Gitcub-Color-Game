<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Color Matching Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: white;
        }
        
        .container {
            max-width: 800px;
            width: 100%;
            background: rgba(0, 0, 0, 0.7);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            text-align: center;
        }
        
        h1 {
            margin: 15px 0;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        
        .score-board {
            display: flex;
            justify-content: space-around;
            margin: 20px 0;
            font-size: 1.2rem;
        }
        
        .game-info {
            margin: 15px 0;
            font-size: 1.1rem;
            line-height: 1.5;
        }
        
        .color-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin: 20px 0;
        }
        
        .color-option {
            height: 120px;
            border-radius: 10px;
            cursor: pointer;
            transition: transform 0.3s, box-shadow 0.3s;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        .color-option:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
        }
        
        .controls {
            margin: 20px 0;
        }
        
        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 12px 25px;
            margin: 10px;
            border-radius: 50px;
            font-size: 1rem;
            cursor: pointer;
            transition: background 0.3s, transform 0.2s;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        button:hover {
            background: #45a049;
            transform: translateY(-2px);
        }
        
        #start-btn {
            background: #2196F3;
        }
        
        #start-btn:hover {
            background: #0b7dda;
        }
        
        #qr-code {
            margin: 20px auto;
            padding: 10px;
            background: white;
            border-radius: 10px;
            width: 150px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin: 15px 0;
            text-align: left;
        }
        
        .instructions h3 {
            margin-bottom: 10px;
            color: #FFD700;
        }
        
        .instructions ol {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 8px;
        }
        
        .feedback {
            font-size: 1.5rem;
            height: 40px;
            margin: 10px 0;
            font-weight: bold;
            transition: all 0.3s;
        }
        
        .correct {
            color: #4CAF50;
        }
        
        .incorrect {
            color: #F44336;
        }
        
        @media (max-width: 600px) {
            .color-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Color Matching Game</h1>
        
        <div class="score-board">
            <div class="score">Score: <span id="score">0</span></div>
            <div class="timer">Time: <span id="time">60</span>s</div>
        </div>
        
        <div class="game-info">
            <p>Match the color name with the correct color box!</p>
            <h2 id="color-to-match">Color Name</h2>
        </div>
        
        <div class="color-grid" id="color-options">
            <!-- Color options will be generated by JavaScript -->
        </div>
        
        <div class="feedback" id="feedback"></div>
        
        <div class="controls">
            <button id="start-btn">Start Game</button>
            <button id="reset-btn">Reset Game</button>
        </div>
        
        <div class="instructions">
            <h3>How to Play:</h3>
            <ol>
                <li>Click the Start Game button to begin</li>
                <li>Match the color name shown above with the correct color box</li>
                <li>Earn 10 points for each correct match</li>
                <li>Complete as many matches as you can before time runs out!</li>
            </ol>
        </div>
        
        <div id="qr-code">
            <!-- QR code will be generated here -->
            <canvas id="qr-canvas" width="128" height="128"></canvas>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Game variables
            let score = 0;
            let timeLeft = 60;
            let timer;
            let isPlaying = false;
            let currentColor = '';
            
            // DOM elements
            const scoreElement = document.getElementById('score');
            const timeElement = document.getElementById('time');
            const colorToMatchElement = document.getElementById('color-to-match');
            const colorOptionsContainer = document.getElementById('color-options');
            const feedbackElement = document.getElementById('feedback');
            const startButton = document.getElementById('start-btn');
            const resetButton = document.getElementById('reset-btn');
            const qrCanvas = document.getElementById('qr-canvas');
            
            // Color options
            const colors = [
                { name: 'Red', value: '#FF0000' },
                { name: 'Green', value: '#00FF00' },
                { name: 'Blue', value: '#0000FF' },
                { name: 'Yellow', value: '#FFFF00' },
                { name: 'Purple', value: '#800080' },
                { name: 'Orange', value: '#FFA500' },
                { name: 'Pink', value: '#FFC0CB' },
                { name: 'Brown', value: '#A52A2A' },
                { name: 'Cyan', value: '#00FFFF' },
                { name: 'Lime', value: '#00FF00' },
                { name: 'Teal', value: '#008080' },
                { name: 'Navy', value: '#000080' }
            ];
            
            // Initialize game
            function initGame() {
                generateQRCode();
                resetButton.addEventListener('click', resetGame);
                startButton.addEventListener('click', startGame);
            }
            
            // Start the game
            function startGame() {
                if (isPlaying) return;
                
                isPlaying = true;
                score = 0;
                timeLeft = 60;
                scoreElement.textContent = score;
                timeElement.textContent = timeLeft;
                
                startButton.textContent = 'Playing...';
                startButton.disabled = true;
                
                // Start timer
                timer = setInterval(function() {
                    timeLeft--;
                    timeElement.textContent = timeLeft;
                    
                    if (timeLeft <= 0) {
                        endGame();
                    }
                }, 1000);
                
                // Generate first round
                generateColorOptions();
            }
            
            // Generate color options
            function generateColorOptions() {
                // Clear previous options
                colorOptionsContainer.innerHTML = '';
                feedbackElement.textContent = '';
                feedbackElement.className = 'feedback';
                
                // Shuffle colors and pick 6
                const shuffledColors = [...colors].sort(() => Math.random() - 0.5);
                const selectedColors = shuffledColors.slice(0, 6);
                
                // Pick one color to be the correct answer
                const correctColorIndex = Math.floor(Math.random() * 6);
                currentColor = selectedColors[correctColorIndex];
                colorToMatchElement.textContent = currentColor.name;
                colorToMatchElement.style.color = getTextColor(currentColor.value);
                
                // Create color options
                selectedColors.forEach(color => {
                    const colorOption = document.createElement('div');
                    colorOption.className = 'color-option';
                    colorOption.style.backgroundColor = color.value;
                    colorOption.dataset.color = color.name;
                    
                    colorOption.addEventListener('click', function() {
                        if (!isPlaying) return;
                        
                        if (this.dataset.color === currentColor.name) {
                            // Correct answer
                            score += 10;
                            scoreElement.textContent = score;
                            feedbackElement.textContent = 'Correct! +10 points';
                            feedbackElement.className = 'feedback correct';
                            
                            // Generate new options after a short delay
                            setTimeout(generateColorOptions, 800);
                        } else {
                            // Wrong answer
                            feedbackElement.textContent = 'Wrong! Try again';
                            feedbackElement.className = 'feedback incorrect';
                        }
                    });
                    
                    colorOptionsContainer.appendChild(colorOption);
                });
            }
            
            // Get appropriate text color for background (black or white)
            function getTextColor(backgroundColor) {
                const hex = backgroundColor.replace('#', '');
                const r = parseInt(hex.substr(0, 2), 16);
                const g = parseInt(hex.substr(2, 2), 16);
                const b = parseInt(hex.substr(4, 2), 16);
                
                const brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;
                return brightness > 128 ? 'black' : 'white';
            }
            
            // End the game
            function endGame() {
                clearInterval(timer);
                isPlaying = false;
                
                startButton.textContent = 'Start Game';
                startButton.disabled = false;
                
                feedbackElement.textContent = `Game Over! Final Score: ${score}`;
                feedbackElement.className = 'feedback';
            }
            
            // Reset the game
            function resetGame() {
                clearInterval(timer);
                isPlaying = false;
                
                score = 0;
                timeLeft = 60;
                scoreElement.textContent = score;
                timeElement.textContent = timeLeft;
                
                startButton.textContent = 'Start Game';
                startButton.disabled = false;
                
                colorToMatchElement.textContent = 'Color Name';
                colorToMatchElement.style.color = 'white';
                colorOptionsContainer.innerHTML = '';
                feedbackElement.textContent = '';
                feedbackElement.className = 'feedback';
            }
            
            // Generate QR code
            function generateQRCode() {
                const url = window.location.href;
                const ctx = qrCanvas.getContext('2d');
                const size = 128;
                
                // Clear canvas
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, size, size);
                
                // Generate QR code manually (simple version)
                const cellSize = 4;
                const data = [
                    [1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1],
                    [1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1],
                    [1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1],
                    [1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1],
                    [1,0,1,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1],
                    [1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1],
                    [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
                    [0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0],
                    [1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0],
                    [0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0],
                    [0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1,0],
                    [1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,0,1,0,0,1],
                    [0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0],
                    [1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0],
                    [1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,1,1,1],
                    [1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,0],
                    [1,0,1,1,1,0,1,0,0,0,1,1,0,1,1,0,0,0,1,0,1],
                    [1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0],
                    [1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,1,0,0,0,1],
                    [1,1,1,1,1,1,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0]
                ];
                
                // Draw QR code
                ctx.fillStyle = 'black';
                for (let y = 0; y < data.length; y++) {
                    for (let x = 0; x < data[y].length; x++) {
                        if (data[y][x] === 1) {
                            ctx.fillRect(x * cellSize + 10, y * cellSize + 10, cellSize, cellSize);
                        }
                    }
                }
                
                // Add text below QR code
                ctx.fillStyle = 'black';
                ctx.font = '10px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('Scan to play', size/2, size + 15);
            }
            
            // Initialize the game
            initGame();
        });
    </script>
</body>
</html>